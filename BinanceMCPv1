#!/usr/bin/env bash
set -eo pipefail

# ===== Proxmox LXC Setup für Binance MCP Server =====
if [[ $EUID -ne 0 ]]; then echo "Bitte als root ausführen (sudo -i)."; exit 1; fi

echo "=== Binance MCP – LXC Installer (Proxmox) ==="

# --- Eingaben ---
read -rp "CTID [219]: " CTID; CTID="${CTID:-219}"
read -rp "Hostname [binance-mcp]: " HN; HN="${HN:-binance-mcp}"

echo "Verfügbare Storages:"
pvesm status | awk 'NR==1 || /dir|zfspool|lvmthin|nfs|ceph/'
read -rp "Rootfs-Storage (z.B. local-lvm / zfs / nfs) [local-lvm]: " STORAGE; STORAGE="${STORAGE:-local-lvm}"
read -rp "Rootfs-Grösse in GB [8]: " ROOTFS_GB; ROOTFS_GB="${ROOTFS_GB:-8}"

read -rp "Bridge [vmbr0]: " BR; BR="${BR:-vmbr0}"
read -rp "DHCP verwenden? [Y/n]: " USE_DHCP
# Initialisiere DHCP-Variable mit Standardwert, wenn leer
USE_DHCP="${USE_DHCP:-Y}"

IPCFG=""
if [[ "${USE_DHCP^^}" == "Y" ]]; then
  IPCFG="ip=dhcp"
  IP4=""
  GW4=""
else
  read -rp "Statische IPv4 (CIDR), z.B. 192.168.1.50/24: " IP4
  read -rp "Gateway IPv4, z.B. 192.168.1.1: " GW4
  # Prüfe, ob die notwendigen Werte eingegeben wurden
  if [[ -z "$IP4" || -z "$GW4" ]]; then
    echo "Fehler: IP-Adresse und Gateway müssen angegeben werden für statische IP-Konfiguration."
    exit 1
  fi
  IPCFG="ip=${IP4},gw=${GW4}"
fi

read -rp "Port für MCP [8765]: " MCP_PORT; MCP_PORT="${MCP_PORT:-8765}"
read -rp "Testnet verwenden? [y/N]: " USE_TESTNET; USE_TESTNET="${USE_TESTNET:-N}"
read -rp "Binance API Key (leer = nur öffentliche Endpunkte): " BAPI
BAPI="${BAPI:-}"
read -rp "Binance API Secret (leer = nur öffentliche Endpunkte): " BSEC
BSEC="${BSEC:-}"

# Optional: bevorzugtes Repo (Fallback, falls PyPI nicht verfügbar)
read -rp "Git-Repo für Fallback [https://github.com/AnalyticAce/BinanceMCPServer]: " REPO_URL
REPO_URL="${REPO_URL:-https://github.com/AnalyticAce/BinanceMCPServer}"

# --- Debian 12 Template holen ---
echo ">> Lade Debian 12 Template (falls nicht vorhanden)…"
pveam update
TPL=$(pveam available | awk '/debian-12-standard_.*_amd64\.tar\.zst/{print $2}' | tail -n1)
if [[ -z "${TPL}" ]]; then echo "Kein Debian-12-Template gefunden."; exit 1; fi
if [[ ! -f "/var/lib/vz/template/cache/$(basename "$TPL")" ]]; then
  pveam download local "$TPL"
fi
TPLPATH="/var/lib/vz/template/cache/$(basename "$TPL")"

# --- Root-Passwort generieren ---
ROOTPW="$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20)"

# --- Container anlegen ---
echo ">> Erstelle Container CTID ${CTID}…"
pct create "${CTID}" "${TPLPATH}" \
  --hostname "${HN}" \
  --unprivileged 1 \
  --features nesting=1 \
  --cores 2 --memory 1024 --swap 512 \
  --rootfs "${STORAGE}:${ROOTFS_GB}" \
  --net0 "name=eth0,bridge=${BR},${IPCFG}" \
  --password "${ROOTPW}"

pct start "${CTID}"

# --- Auf IP warten (bei DHCP) ---
echo ">> Warte auf Netzwerk…"
TRY=0; CTIP=""
while [[ $TRY -lt 30 ]]; do
  sleep 2
  set +e
  CTIP=$(pct exec "${CTID}" -- bash -lc "ip -4 -o addr show dev eth0 | awk '{print \$4}' | cut -d/ -f1" 2>/dev/null | head -n1)
  set -e
  [[ -n "$CTIP" ]] && break
  ((TRY++))
done

# Wenn statisch, IP aus Eingabe übernehmen
if [[ -z "${CTIP}" && "${USE_DHCP^^}" != "Y" ]]; then
  CTIP="${IP4%/*}"
fi

# --- Installation im Container ---
echo ">> Installiere Abhängigkeiten und MCP Server im Container…"
pct exec "${CTID}" -- bash -lc "set -e
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get install -y python3 python3-venv python3-pip git build-essential pkg-config curl ca-certificates

useradd -r -s /usr/sbin/nologin -d /opt/BinanceMCPServer binance-mcp || true
mkdir -p /opt/BinanceMCPServer
chown -R binance-mcp:binance-mcp /opt/BinanceMCPServer

cd /opt/BinanceMCPServer
python3 -m venv .venv
source .venv/bin/activate
pip install --upgrade pip

# Bevorzugt PyPI
if ! pip install binance-mcp-server >/tmp/pip_install.log 2>&1; then
  echo 'PyPI-Installation fehlgeschlagen, klone Fallback-Repo' >&2
  rm -rf /opt/BinanceMCPServer/src && mkdir -p /opt/BinanceMCPServer/src
  git clone --depth=1 '${REPO_URL}' /opt/BinanceMCPServer/src
  pip install /opt/BinanceMCPServer/src || { echo 'Fallback-Installation fehlgeschlagen'; exit 1; }
fi

# Env
cat >/etc/default/binance-mcp <<EOFENV
BINANCE_API_KEY='${BAPI}'
BINANCE_API_SECRET='${BSEC}'
MCP_HOST='0.0.0.0'
MCP_PORT='${MCP_PORT}'
BINANCE_TESTNET='$( [[ \"${USE_TESTNET^^}\" == \"Y\" ]] && echo true || echo false )'
EOFENV
chmod 640 /etc/default/binance-mcp
chown root:root /etc/default/binance-mcp

# Dienst
cat >/etc/systemd/system/binance-mcp.service <<'EOUNIT'
[Unit]
Description=Binance MCP Server
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=binance-mcp
Group=binance-mcp
EnvironmentFile=/etc/default/binance-mcp
WorkingDirectory=/opt/BinanceMCPServer
ExecStart=/bin/sh -lc '/opt/BinanceMCPServer/.venv/bin/binance-mcp-server --host \"\${MCP_HOST}\" --port \"\${MCP_PORT}\" \$( [ \"\${BINANCE_TESTNET}\" = \"true\" ] && echo --binance-testnet ) \$( [ -n \"\${BINANCE_API_KEY}\" ] && [ -n \"\${BINANCE_API_SECRET}\" ] && echo --binance-api-key \"\${BINANCE_API_KEY}\" --binance-api-secret \"\${BINANCE_API_SECRET}\" )'
Restart=on-failure
RestartSec=3
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=full
ProtectHome=true

[Install]
WantedBy=multi-user.target
EOUNIT

systemctl daemon-reload
systemctl enable --now binance-mcp.service
"

# --- Zusammenfassung ---
echo
echo "========= Zusammenfassung ========="
echo "CTID:            ${CTID}"
echo "Hostname:        ${HN}"
echo "Container-RootPW:${ROOTPW}"
echo "Bridge:          ${BR}"
echo "IP (CT):         ${CTIP:-unbekannt}"
echo "Port (MCP):      ${MCP_PORT}"
echo "Testnet:         ${USE_TESTNET^^}"
echo "Service:         systemctl status binance-mcp -l   (im Container)"
echo "Logs:            journalctl -u binance-mcp -f      (im Container)"
echo "Env-Datei:       /etc/default/binance-mcp          (im Container)"
echo "==================================="
echo
echo "n8n HTTP-Node Beispiel-URL: http://${CTIP:-<CT-IP-unbekannt>}:${MCP_PORT}/binance_rest"
echo "Beispiel-Body: {\"method\":\"GET\",\"path\":\"/api/v3/ticker/price\",\"query\":{\"symbol\":\"BTCUSDT\"},\"security\":\"NONE\"}"
echo
echo "In den Container: pct enter ${CTID}"
